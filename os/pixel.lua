--[[
Copyright 2018 Luca_S

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

MODIFIED by Perodactyl (github), 2024: pixel BIOS for SketchOS.
Added another bootable type and some _G definitions. Minified to fit code + license.
]]--
_G._PIXEL_V="0.2"_G._PIXEL_FMT=2 local dv,iv,tp,te,tl,ts,btfn={},component.invoke,component.type,true,5,computer.uptime()local function un(a)local s=iv(a,"readSector",1)for i=1,#s do if s:sub(i,i)=="\0"then s=s:sub(1,i-1)break end end return s end local ep=component.list("eeprom")()computer.getBootAddress = function()return iv(ep,"getData")end computer.setBootAddress=function(a)return iv(ep,"setData",a)end local function bt(a)if tp(a)=="drive"then local f,e=load(un(a))if not f then return false end return "UNM"elseif tp(a)=="filesystem"then if iv(a,"exists","EFI.lua")and not iv(a,"isDirectory","EFI.lua")then return "EFI"end if iv(a, "exists", "init.lua")and not iv(a, "isDirectory", "init.lua")then return "MAN"end end return false end local s=1 for a,t in pairs(component.list())do local s=bt(a)if s then dv[#dv+1]={a,s}end end local sn,g=component.list("screen")(),component.list("gpu")()iv(g,"bind",sn)iv(g,"setResolution",iv(g,"maxResolution"))local w,h=iv(g, "getResolution")local function cl()iv(g,"setForeground",0xFFFFFF)iv(g,"setBackground",0)iv(g,"fill",1,1,w,h," ")end cl()local function ct(t,y)local x=w/2-#t/2 iv(g,"set",2,y,t)end local ba=computer.getBootAddress()for i,v in pairs(dv)do if v[1]==ba then s=i break end end local function dmn()cl()ct("Pixel EFI v".._PIXEL_V.." (f".._PIXEL_FMT..") -- Select a bootable entry.", 2)for i,v in pairs(dv)do local f=v[1]if i==s then iv(g,"setForeground",0)iv(g,"setBackground",0xFFFFFF)end iv(g,"fill",1,i+5,w,1," ")ct(f.." "..v[2].." ("..(iv(f,"getLabel")or"No Label")..")",i+5)if i==s then iv(g,"setForeground",0xFFFFFF)iv(g,"setBackground",0)end if te then ct("  Boot in "..tl-math.floor(computer.uptime()-ts).."s  ",3)end end end local function ln(v)local a,p,n=v[1]cl()if ba~=a then ct("Setting Address...",1)computer.setBootAddress(a)end if tp(a)=="filesystem"then if v[2]=="EFI" then p,n="EFI.lua","EFI"elseif v[2]=="UNM"then n="Boot Sector"else p,n="init.lua","init.lua" end local d,e=iv(a,"open",p)if not d then error(e)end local c=""repeat local b=iv(a,"read",d,math.huge)c=c..(b or"")until not b btfn=load(c,"="..n)elseif tp(a)=="drive"then btfn=load(un(a),"="..n)end end if #dv==1 then ln(dv[1])elseif #dv==0 then error("No bootable device!")end if dv[s][2]=="EFI"then tl=1.0 end dmn()while true do local e,_,_,k=computer.pullSignal(0.05)if e=="key_down"then te=false if k==208 then s=s+1 if s>#dv then s=1 end elseif k==200 then s=s-1 if s<1 then s=#dv end elseif k==28 then ln(dv[s]) break end dmn()elseif e =="touch"then te=false if dv[k-5] then if s==k-5 then ln(dv[s]) break else s=k-5 end end dmn()elseif te and computer.uptime()- ts>tl then ln(dv[s])break elseif te then dmn()end end return btfn()